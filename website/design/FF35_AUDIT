First pass: Quick Review of Firefox Features
- Video Tag
  - Docs:
    - https://developer.mozilla.org/En/HTML/Element/Audio
    - https://developer.mozilla.org/En/HTML/Element/Video
    - https://developer.mozilla.org/En/HTML/Element/Source
    - https://developer.mozilla.org/En/Manipulating_video_using_canvas
    - https://developer.mozilla.org/En/nsIDOMHTMLMediaElement
    - https://developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
    - http://en.flossmanuals.net/TheoraCookbook
  - nsIContentPolicy is checked on load
  - Uses NSIChannels for initial load
  - Wrapped in nsHTMLMediaElement::mDecoder
    - is nsOggDecoder() or nsWaveDecoder()
    - liboggplay
  - Governed by media.* prefs
  - Preliminary audit shows they do not use the liboggplay tcp functions
- Geolocation
  - Wifi:
    - https://developer.mozilla.org/En/Monitoring_WiFi_access_points
    - Requires security policy to allow. Then still prompted
  - navigator.geolocation
    - Governed by geo.enabled
    - "2 week access token" is set
    - http://mxr.mozilla.org/mozilla1.9.1/source/dom/src/geolocation/NetworkGeolocationProvider.js
    - https://developer.mozilla.org/En/Using_geolocation
- DNS prefetching after toggle
  - prefetch pref? Always disable for now?
    - network.dns.disablePrefetch
    - Also disabled in netwerk/dns/src/nsDNSService2.cpp when manual proxies
      are set..
    - This should prevent prefetching of non-tor urls in tor mode..
    - But the reverse is unclear.
    - DocShell attribute!!1 YAY
      - http://www.oxymoronical.com/experiments/apidocs/interface/nsIDocShell
      - "Takes effect for the NEXT document loaded...."
        - Do we win this race? hrmm.. If we do, the tor->nontor direction
          should also be safe.
  - Content policy called?
    - No. See content/html/content/src/nsHTMLDNSPrefetch.cpp
- Storage
  - https://developer.mozilla.org/en/Storage
  - "It is available to trusted callers, meaning extensions and Firefox
    components only."
- New content policy
  - Content Security Policy. Addon-only
- "Offline resources"
  - https://developer.mozilla.org/en/Offline_resources_in_Firefox
  - https://developer.mozilla.org/en/nsIApplicationCache
  - browser.cache.offline.enable toggles
  - browser.cache.disk.enable does not apply. Seperate "device".
  - Does our normal cache clearing mechanism apply?
    - We call nsICacheService.evictEntries()
    - May need: nsOfflineCacheDevice::EvictEntries(NULL)
  - Code is smart enough to behave cleanly if we simply set
    browser.cache.offline.enable or enable private browsing.
- Mouse gesture and other new DOM events
- Fonts
  - Remote fonts obey content policy. Good.
  - XXX: Are they cached independent of regular cache? Prob not.
  - Hrmm can probe for installed fonts:
    http://remysharp.com/2008/07/08/how-to-detect-if-a-font-is-installed-only-using-javascript/
    http://www.lalit.org/lab/javascript-css-font-detect
    http://www.ajaxupdates.com/cssjavascript-font-detector/
    http://code.google.com/p/jquery-fontavailable/
- Drag and drop
  - https://developer.mozilla.org/En/DragDrop/Drag_and_Drop
  - https://developer.mozilla.org/En/DragDrop/Drag_Operations
  - https://developer.mozilla.org/En/DragDrop/Dragging_and_Dropping_Multiple_Items
  - https://developer.mozilla.org/En/DragDrop/Recommended_Drag_Types
  - https://developer.mozilla.org/En/DragDrop/DataTransfer
  - Should be no different than normal url handling..
- Local Storage
  - https://developer.mozilla.org/en/DOM/Storage#localStorage
  - Disabled by dom storage pref..
  - Private browsing mode has its own DB
    - Memory only?
  - Disk Avoidance of gStorage and local storage:
    - mSessionOnly set via nsDOMStorage::CanUseStorage()
      - Seems to be set to true if cookies are session-only or private
        browsing mode
        - Our cookies are NOT session-only with dual cookie jars
          - but this is ok if we clear the session storage..
            - XXX: Technically clearing session storage may break
              sites if cookies remain though
      - nsDOMStoragePersistentDB not used if mSessionOnly
  - Can clear with nsDOMStorage::ClearAll() or nsIDOMStorage2::clear()?
    - These only work for a particular storage. There's both global now
      and per-origin storage instances
    - Each docshell has tons of storages for each origin contained in it
    - Toggling dom.storage.enabled does not clear existing storage

Second Pass: Verification of all Torbutton Assumptions
- "Better privacy controls"
- "Swap DocShell"
  - https://developer.mozilla.org/En/XUL/Method/SwapDocShells
- Private browsing
  - https://developer.mozilla.org/En/Supporting_private_browsing_mode
  - Read iSec report
  - Compare to Chrome
    - API use cases
- https://developer.mozilla.org/En/Security_changes_in_Firefox_3.5
- SSL Toggle
- Unto tabs Toggle
- SafeBrowsing Update Key
- Places
- SessionStore
  - Has been reworked with observers and write methods. Should use those.

Third Pass: Exploit Auditing
- Remote fonts
- SVG with HTML
- Javascript threads+locking
- Ogg theora and vorbis codecs
- SQLite


- https://developer.mozilla.org/en/Firefox_3_for_developers
